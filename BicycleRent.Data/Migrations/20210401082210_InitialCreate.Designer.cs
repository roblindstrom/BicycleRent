// <auto-generated />
using System;
using BicycleRent.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace bicyclerent.data.Migrations
{
    [DbContext(typeof(BicycleRentDbContext))]
    [Migration("20210401082210_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.4")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BicycleRent.Core.Models.Address", b =>
                {
                    b.Property<double>("AddressID")
                        .HasColumnType("float");

                    b.Property<string>("AddressName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AddressID");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("BicycleRent.Core.Models.Bicycle", b =>
                {
                    b.Property<double>("BicycleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float");

                    b.Property<int>("BicycleBrand")
                        .HasColumnType("int");

                    b.Property<string>("BicycleSize")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("PricePerDay")
                        .HasColumnType("float");

                    b.HasKey("BicycleId");

                    b.ToTable("Bicycles");
                });

            modelBuilder.Entity("BicycleRent.Core.Models.Booking", b =>
                {
                    b.Property<double>("BookedBicycle")
                        .HasColumnType("float");

                    b.Property<double>("CustomerWithBooking")
                        .HasColumnType("float");

                    b.Property<DateTime>("BookingEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("BookingStartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("BookedBicycle", "CustomerWithBooking");

                    b.HasIndex("CustomerWithBooking");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("BicycleRent.Core.Models.CustomerInformation", b =>
                {
                    b.Property<double>("Customer_AdressID")
                        .HasColumnType("float");

                    b.Property<string>("Firstname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lastname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("PersonalID")
                        .HasColumnType("float");

                    b.HasKey("Customer_AdressID");

                    b.ToTable("CustomerInformation");
                });

            modelBuilder.Entity("BicycleRent.Core.Models.CustomerInformationAddress", b =>
                {
                    b.Property<double>("AddressID")
                        .HasColumnType("float");

                    b.Property<double>("Customer_AddressID")
                        .HasColumnType("float");

                    b.HasKey("AddressID", "Customer_AddressID");

                    b.HasIndex("Customer_AddressID");

                    b.ToTable("CustomerInformationAddresses");
                });

            modelBuilder.Entity("BicycleRent.Core.Models.Booking", b =>
                {
                    b.HasOne("BicycleRent.Core.Models.Bicycle", "Bicycle")
                        .WithMany("Bookings")
                        .HasForeignKey("BookedBicycle")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BicycleRent.Core.Models.CustomerInformation", "CustomerInformation")
                        .WithMany("Bookings")
                        .HasForeignKey("CustomerWithBooking")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bicycle");

                    b.Navigation("CustomerInformation");
                });

            modelBuilder.Entity("BicycleRent.Core.Models.CustomerInformationAddress", b =>
                {
                    b.HasOne("BicycleRent.Core.Models.Address", "Address")
                        .WithMany("Customer_Addresses")
                        .HasForeignKey("AddressID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BicycleRent.Core.Models.CustomerInformation", "CustomerInformation")
                        .WithMany("Customer_Addresses")
                        .HasForeignKey("Customer_AddressID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("CustomerInformation");
                });

            modelBuilder.Entity("BicycleRent.Core.Models.Address", b =>
                {
                    b.Navigation("Customer_Addresses");
                });

            modelBuilder.Entity("BicycleRent.Core.Models.Bicycle", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("BicycleRent.Core.Models.CustomerInformation", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("Customer_Addresses");
                });
#pragma warning restore 612, 618
        }
    }
}
